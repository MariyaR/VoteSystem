DROP TABLE user_roles IF EXISTS;
DROP TABLE voting_history IF EXISTS;
DROP TABLE restos_history IF EXISTS;
DROP TABLE restos IF EXISTS;
DROP TABLE users IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE GLOBAL_SEQ AS INTEGER START WITH 100000;

CREATE TABLE users
(
  id               INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name             VARCHAR(255)            NOT NULL,
  email            VARCHAR(255)            NOT NULL,
  password         VARCHAR(255)            NOT NULL,
  registered       TIMESTAMP DEFAULT now() NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx
  ON USERS (email);


CREATE TABLE user_roles
(
  user_id INTEGER NOT NULL,
  role    VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE restos
(
  id               INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name             VARCHAR(255)                 NOT NULL,
  address          VARCHAR(255)                 NOT NULL
);
CREATE UNIQUE INDEX users_unique_address_idx
    ON restos (address);

CREATE TABLE voting_history
(
    id               INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    date             DATE DEFAULT current_date NOT NULL,
    user_id          INTEGER           NOT NULL,
    resto_id         INTEGER           NOT NULL,

    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (resto_id) REFERENCES restos (id) ON DELETE CASCADE,
    CONSTRAINT date_user_idx UNIQUE (date, user_id)
);

CREATE TABLE restos_history
(
  id               INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  date             DATE DEFAULT now() NOT NULL,
  resto_id         INTEGER           NOT NULL,
  resto_menu       VARCHAR(1000)           NOT NULL,
  counter          INTEGER,

  FOREIGN KEY (resto_id) REFERENCES restos (id) ON DELETE CASCADE,
  CONSTRAINT date_resto_idx UNIQUE (date, resto_id)
);

